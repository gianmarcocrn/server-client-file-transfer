import socket
import sys
import os

sys.path.append('../')																				# go to parent folder to access sharedMod

from sharedMod import send_file,recv_file,send_listing,recv_listing

try: 
	srv_sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM) 									# AF_INET: address family, SOCK_STREAM:socket type
	srv_sock.bind(("0.0.0.0",int(sys.argv[1])))  													# bind socket with kernel
	print("IP: 0.0.0.0" + ", Port:" + sys.argv[1] + ", Server Up and running")
	srv_sock.listen(5) 																				# queue where new connections requests will be added by kernel
except Exception as e:
	print(e)
	exit(1)


while True:
	try:   
		print("Waiting for new client request...")
		cli_sock, cli_addr = srv_sock.accept() 														# dequeue connection request from the queue generated by listen
		cli_addr_str = str(cli_addr)
		data = cli_sock.recv(4096) 																	# receiving client command
		data_list = data.decode().split(" ") 														# splitting client command in a 2-element list

		if (data_list[0] == "list"):
			send_listing(cli_sock) 																	# listing current directory
			print("Client with IP: " + cli_addr_str + " and port #" + sys.argv[1] + " successfully performed a " + data_list[0] + " request")	# success report
			continue

		if (data_list[0] == "put"): 
			if (data_list[1] in os.listdir()): 														# checking if file is already in server directory (exclusive creation)
				print("Client with IP: " + cli_addr_str + " and port #" + sys.argv[1] + " failed " + data_list[0] + " request on " + data_list[1] + ". File already in server directory")	# success report
				continue
			else:
				recv_file(cli_sock,data_list[1]) 													# uploading file in server directory

		if (data_list[0] == "get"):
			send_file(cli_sock,data_list[1]) 														# downloading file in client directory
		
		print("Client with IP: " + cli_addr_str + " and port #" + sys.argv[1] + " successfully performed a " + data_list[0] + " request on " + data_list[1])
	except Exception as e:																			# handling connection drops
		print(e,end=", ")
		print(data_list[0] + " request has failed")													# reporting failure when connection drops
		exit(1)
	finally:
		cli_sock.close()																			# close client socket

srv_sock.close()																					# close server socket

exit(0) 																							# Exit with a zero value, to indicate success